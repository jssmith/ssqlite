{
   "AWSTemplateFormatVersion" : "2010-09-09",
   "Description" : "This template creates a development environment with Lambda + VPC + EC2 + EFS.",
   "Parameters" : {
     "KeyName": {
       "Type": "AWS::EC2::KeyPair::KeyName",
       "Description": "Name of an existing EC2 key pair to enable SSH access to the ECS instances"
      },
      "S3CodeBucket": {
        "Type": "String",
        "Description": "Name of the S3 bucket in which code will be stored"
      }
   },
   "Conditions" : {
     "IsUsWest2": { "Fn::Equals" : [ { "Ref" : "AWS::Region" }, "us-west-2"] },
     "IsUSEast1": { "Fn::Equals" : [ { "Ref" : "AWS::Region" }, "us-east-1"] }
   },
   "Resources" : {
      "lambdaVPC" : {
         "Type" : "AWS::EC2::VPC",
         "Properties" : {
            "CidrBlock" : "192.168.1.0/24",
            "EnableDnsSupport" : "true",
            "EnableDnsHostnames" : "true",
            "InstanceTenancy" : "default",
            "Tags" : [ {"Key" : "foo", "Value" : "bar"} ]
         }
      },
      "lambdaVPCsubneta" : {
         "Type" : "AWS::EC2::Subnet",
         "Properties" : {
            "VpcId" : { "Ref" : "lambdaVPC" },
            "CidrBlock" : "192.168.1.0/26",
            "AvailabilityZone" : { "Fn::Join" : ["", [ { "Ref" : "AWS::Region" }, "a" ]] }
         }
      },
      "lambdaVPCsubnetb" : {
         "Type" : "AWS::EC2::Subnet",
         "Properties" : {
            "VpcId" : { "Ref" : "lambdaVPC" },
            "CidrBlock" : "192.168.1.64/26",
            "AvailabilityZone" : { "Fn::Join" : ["", [ { "Ref" : "AWS::Region" }, "b" ]] }
         }
      },
      "lambdaVPCsubnetc" : {
         "Type" : "AWS::EC2::Subnet",
         "Properties" : {
            "VpcId" : { "Ref" : "lambdaVPC" },
            "CidrBlock" : "192.168.1.128/26",
            "AvailabilityZone" : { "Fn::Join" : ["", [ { "Ref" : "AWS::Region" }, "c" ]] }
         }
      },
      "lambdaInternetGateway" : {
         "Type" : "AWS::EC2::InternetGateway",
         "Properties" : {
            "Tags" : [ {"Key" : "foo", "Value" : "bar"}]
         }
      },
      "AttachGateway" : {
          "Type" : "AWS::EC2::VPCGatewayAttachment",
          "Properties" : {
          "VpcId" : { "Ref" : "lambdaVPC" },
          "InternetGatewayId" : { "Ref" : "lambdaInternetGateway" }
        }
      },
      "lambdaRouteTable" : {
         "Type" : "AWS::EC2::RouteTable",
         "Properties" : {
            "VpcId" : { "Ref" : "lambdaVPC" }
         }
      },
      "myRoute" : {
         "Type" : "AWS::EC2::Route",
         "DependsOn" : "lambdaInternetGateway",
         "Properties" : {
            "RouteTableId" : { "Ref" : "lambdaRouteTable" },
            "DestinationCidrBlock" : "0.0.0.0/0",
            "GatewayId" : { "Ref" : "lambdaInternetGateway" }
         }
      },
      "lambdaRouteTableAssociationa" : {
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "lambdaVPCsubneta" },
          "RouteTableId" : { "Ref" : "lambdaRouteTable" }
        }
      },
      "lambdaRouteTableAssociationb" : {
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "lambdaVPCsubnetb" },
          "RouteTableId" : { "Ref" : "lambdaRouteTable" }
        }
      },
      "lambdaRouteTableAssociationc" : {
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "lambdaVPCsubnetc" },
          "RouteTableId" : { "Ref" : "lambdaRouteTable" }
        }
      },
      "PublicNetworkAcl" : {
        "Type" : "AWS::EC2::NetworkAcl",
        "Properties" : {
          "VpcId" : {"Ref" : "lambdaVPC"},
        }
      },
      "InboundPublicNetworkAclEntry" : {
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
          "RuleNumber" : "102",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "false",
          "CidrBlock" : "0.0.0.0/0",
          "PortRange" : { "From" : "0", "To" : "65535" }
        }
      },
      "OutboundPublicNetworkAclEntry" : {
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : {"Ref" : "PublicNetworkAcl"},
          "RuleNumber" : "100",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "true",
          "CidrBlock" : "0.0.0.0/0",
          "PortRange" : {"From" : "0", "To" : "65535"}
        }
      },
      "PublicSubnetNetworkAclAssociationa" : {
        "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "lambdaVPCsubneta" },
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
        }
      },
      "PublicSubnetNetworkAclAssociationb" : {
        "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "lambdaVPCsubnetb" },
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
        }
      },
      "PublicSubnetNetworkAclAssociationc" : {
        "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "lambdaVPCsubnetc" },
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
        }
      },
      "LambdaExecutionRole" : {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
             "Version" : "2012-10-17",
             "Statement": [ {
                "Effect": "Allow",
                "Principal": {
                   "Service": [ "lambda.amazonaws.com" ]
                },
                "Action": [ "sts:AssumeRole" ]
             } ]
           },
          "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
            "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
            "arn:aws:iam::aws:policy/AmazonS3FullAccess" ]
        }
      },
      "QueryServiceFunction" : {
        "Type" : "AWS::Lambda::Function",
        "Properties" : {
          "Description" : "Serverless SQL Query Endpoint",
          "Code" : {
            "S3Bucket" : { "Ref" : "S3CodeBucket" },
            "S3Key" : "ssqlite-fn.zip"
          },
          "FunctionName" : { "Fn::Join" : [ "-", [ "SQLiteDemo", { "Ref" : "AWS::StackName" } ]] },
          "Handler" : "handler.lambda_handler",
          "Runtime" : "python3.6",
          "Timeout" : 30,
          "VpcConfig" : {
            "SecurityGroupIds" : [ { "Ref" : "LambdaVPCSecurityGroup" } ],
            "SubnetIds" : [
              { "Ref" : "lambdaVPCsubneta" },
              { "Ref" : "lambdaVPCsubnetb" },
              { "Ref" : "lambdaVPCsubnetc" }
            ]
          },
          "Role" : { "Fn::GetAtt" : [ "LambdaExecutionRole" , "Arn" ] },
          "Environment" : {
            "Variables" : {
              "CONTROL_SERVICE_IP" : { "Fn::GetAtt" : [ "ControlServer", "PrivateIp"] },
              "EFS_IP" : { "Ref" : "FileSystem" }
            }
          }
        }
      },
      "LambdaVPCSecurityGroup" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupDescription" : "For Lambda",
          "VpcId" : { "Ref"  : "lambdaVPC"},
          "SecurityGroupIngress" : [
            {
              "IpProtocol" : "udp",
              "FromPort" : "0",
              "ToPort" : "65535",
              "CidrIp" : "192.168.1.0/24"
            },
            {
              "IpProtocol" : "tcp",
              "FromPort" : "0",
              "ToPort" : "65535",
              "CidrIp" : "0.0.0.0/0"
            }
          ],
          "SecurityGroupEgress" : [
            {
              "IpProtocol" : "udp",
              "FromPort" : "0",
              "ToPort" : "65535",
              "CidrIp" : "192.168.1.0/24"
            },
            {
              "IpProtocol" : "tcp",
              "FromPort" : "0",
              "ToPort" : "65535",
              "CidrIp" : "0.0.0.0/0"
            }
          ]
        }
      },

      "MountTargetSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "VpcId": { "Ref": "lambdaVPC" },
          "GroupDescription": "Security group for mount target",
          "SecurityGroupIngress": [
            {
              "IpProtocol": "tcp",
              "FromPort": "2049",
              "ToPort": "2049",
              "CidrIp": "192.168.1.0/24"
            }
          ]
        }
      },
      "FileSystem": {
        "Type": "AWS::EFS::FileSystem",
        "Properties": {
          "PerformanceMode": "generalPurpose",
          "FileSystemTags": [
            {
              "Key": "Name",
              "Value": { "Fn::Join" : [ "-", [ "sqlite-fs", { "Ref" : "AWS::StackName" } ]] }
            }
          ]
        }
      },
      "MountTargeta": {
        "Type": "AWS::EFS::MountTarget",
        "Properties": {
          "FileSystemId": { "Ref": "FileSystem" },
          "SubnetId": { "Ref": "lambdaVPCsubneta" },
          "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]
        }
      },
      "MountTargetb": {
        "Type": "AWS::EFS::MountTarget",
        "Properties": {
          "FileSystemId": { "Ref": "FileSystem" },
          "SubnetId": { "Ref": "lambdaVPCsubnetb" },
          "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]
        }
      },
      "MountTargetc": {
        "Type": "AWS::EFS::MountTarget",
        "Properties": {
          "FileSystemId": { "Ref": "FileSystem" },
          "SubnetId": { "Ref": "lambdaVPCsubnetc" },
          "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]
        }
      },
      "ControlServerRole" : {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
             "Version" : "2012-10-17",
             "Statement": [ {
                "Effect": "Allow",
                "Principal": {
                   "Service": [ "ec2.amazonaws.com" ]
                },
                "Action": [ "sts:AssumeRole" ]
             } ]
           },
          "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/AWSLambdaFullAccess",
            "arn:aws:iam::aws:policy/AmazonElasticFileSystemReadOnlyAccess" ]
        }
      },
      "ControlServerIamInstanceProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "Roles": [ { "Ref" : "ControlServerRole" } ]
        }
      },
      "ControlServer": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
            "ImageId": {
              "Fn::If" : [
                "IsUsWest2",
                "ami-32d8124a",
                { "Fn::If" : [
                  "IsUSEast1",
                  "ami-6057e21a",
                  "UNSUPPORTED"
                ]}
              ]},
            "InstanceType": "t2.micro",
            "KeyName": { "Ref" : "KeyName" },
            "IamInstanceProfile": { "Ref" : "ControlServerIamInstanceProfile" },
            "NetworkInterfaces": [ {
              "AssociatePublicIpAddress": "true",
              "DeviceIndex": "0",
              "GroupSet": [ { "Ref" : "LambdaVPCSecurityGroup" }  ],
              "SubnetId": { "Ref" : "lambdaVPCsubneta" }
            }]
        }
      }

   }
}
